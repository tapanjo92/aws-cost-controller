import { SNS } from 'aws-sdk';
import { EventBridgeEvent } from 'aws-lambda';

const sns = new SNS({ region: process.env.AWS_REGION });

interface AnomalyEvent {
  accountId: string;
  accountName: string;
  service: string;
  region: string;
  timestamp: number;
  actualCost: number;
  expectedCost: number;
  deviation: number;
  deviationPercentage: number;
  anomalyScore: number;
  reasons: string[];
  hourlyRate: number;
  projectedDailyCost: number;
  projectedMonthlyCost: number;
}

export const handler = async (event: EventBridgeEvent<string, string>): Promise<void> => {
  console.log('Processing anomaly alert', event);
  
  try {
    const anomaly: AnomalyEvent = JSON.parse(event.detail);
    
    // Create alert message
    const message = formatAlertMessage(anomaly);
    const subject = formatAlertSubject(anomaly);
    
    // Send SNS alert
    await sendAlert(subject, message, anomaly);
    
    // Log for monitoring
    console.log('Alert sent successfully', {
      accountId: anomaly.accountId,
      service: anomaly.service,
      score: anomaly.anomalyScore
    });
    
  } catch (error) {
    console.error('Error sending alert:', error);
    throw error;
  }
};

function formatAlertSubject(anomaly: AnomalyEvent): string {
  const severity = getSeverity(anomaly.anomalyScore);
  const emoji = getEmoji(severity);
  
  return `${emoji} [${severity}] AWS Cost Anomaly: ${anomaly.service} in ${anomaly.accountName}`;
}

function formatAlertMessage(anomaly: AnomalyEvent): string {
  const severity = getSeverity(anomaly.anomalyScore);
  const emoji = getEmoji(severity);
  const timestamp = new Date(anomaly.timestamp).toISOString();
  
  return `
${emoji} AWS COST ANOMALY DETECTED ${emoji}

Severity: ${severity}
Anomaly Score: ${(anomaly.anomalyScore * 100).toFixed(1)}%

Account Details:
- Account ID: ${anomaly.accountId}
- Account Name: ${anomaly.accountName}
- Region: ${anomaly.region}
- Service: ${anomaly.service}
- Time: ${timestamp}

Cost Analysis:
- Actual Cost: ${anomaly.actualCost.toFixed(2)}/hour
- Expected Cost: ${anomaly.expectedCost.toFixed(2)}/hour
- Deviation: ${anomaly.deviation.toFixed(2)} (${anomaly.deviationPercentage > 0 ? '+' : ''}${anomaly.deviationPercentage.toFixed(1)}%)

Projections:
- Projected Daily Cost: ${anomaly.projectedDailyCost.toFixed(2)}
- Projected Monthly Cost: ${anomaly.projectedMonthlyCost.toFixed(2)}

Reasons:
${anomaly.reasons.map(r => `• ${r}`).join('\n')}

Action Required:
${getRecommendedActions(anomaly)}

View Dashboard: https://console.aws.amazon.com/cost-management/home#/dashboard
Check Service: https://console.aws.amazon.com/${getServiceConsoleUrl(anomaly.service)}

---
This alert was generated by AWS Cost Controller
To adjust sensitivity or unsubscribe, visit your settings
  `.trim();
}

function getSeverity(score: number): string {
  if (score >= 0.99) return 'CRITICAL';
  if (score >= 0.97) return 'HIGH';
  if (score >= 0.95) return 'MEDIUM';
  return 'LOW';
}

function getEmoji(severity: string): string {
  switch (severity) {
    case 'CRITICAL': return '🚨';
    case 'HIGH': return '⚠️';
    case 'MEDIUM': return '📊';
    default: return 'ℹ️';
  }
}

function getRecommendedActions(anomaly: AnomalyEvent): string {
  const actions: string[] = [];
  
  // Service-specific recommendations
  switch (anomaly.service) {
    case 'AmazonEC2':
      actions.push('• Check for unintended instance launches');
      actions.push('• Review instance types and sizes');
      actions.push('• Verify auto-scaling settings');
      if (anomaly.deviationPercentage > 200) {
        actions.push('• URGENT: Check for cryptocurrency mining or compromised instances');
      }
      break;
      
    case 'AmazonRDS':
      actions.push('• Review database instance sizes');
      actions.push('• Check for unexpected backup or snapshot costs');
      actions.push('• Verify Multi-AZ deployment settings');
      break;
      
    case 'AmazonS3':
      actions.push('• Check for unusual data transfer costs');
      actions.push('• Review bucket lifecycle policies');
      actions.push('• Look for public bucket access');
      break;
      
    case 'AWSLambda':
      actions.push('• Check for infinite loops or recursive invocations');
      actions.push('• Review function memory allocation');
      actions.push('• Verify concurrency settings');
      break;
      
    default:
      actions.push('• Review recent changes to this service');
      actions.push('• Check CloudTrail for unusual API activity');
  }
  
  // General recommendations based on severity
  if (anomaly.anomalyScore >= 0.99) {
    actions.unshift('• IMMEDIATE ACTION REQUIRED - Potential security incident');
    actions.push('• Consider temporarily disabling the affected resources');
  }
  
  return actions.join('\n');
}

function getServiceConsoleUrl(service: string): string {
  const urlMap: Record<string, string> = {
    'AmazonEC2': 'ec2',
    'AmazonRDS': 'rds',
    'AmazonS3': 's3',
    'AWSLambda': 'lambda',
    'AmazonDynamoDB': 'dynamodb',
    'AmazonCloudFront': 'cloudfront',
    'ElasticLoadBalancing': 'elasticloadbalancing'
  };
  
  return urlMap[service] || 'console';
}

async function sendAlert(subject: string, message: string, anomaly: AnomalyEvent): Promise<void> {
  // Add custom attributes for filtering
  const messageAttributes = {
    severity: {
      DataType: 'String',
      StringValue: getSeverity(anomaly.anomalyScore)
    },
    accountId: {
      DataType: 'String',
      StringValue: anomaly.accountId
    },
    service: {
      DataType: 'String',
      StringValue: anomaly.service
    },
    anomalyScore: {
      DataType: 'Number',
      StringValue: anomaly.anomalyScore.toString()
    }
  };
  
  const params = {
    TopicArn: process.env.SNS_TOPIC_ARN!,
    Subject: subject,
    Message: message,
    MessageAttributes: messageAttributes
  };
  
  await sns.publish(params).promise();
}
